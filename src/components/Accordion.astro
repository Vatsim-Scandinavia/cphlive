---
interface Props {
  title: string;
  time: string;
  details: string;
}

const { title, time, details } = Astro.props as Props;
---

<div class="accordion group relative rounded-md">
    <button
      class="accordion__button flex w-full flex-1 items-start justify-between text-xl font-medium transition hover:text-blue-500-500 text-right"
      type="button"
      id={`${title} accordion menu button`}
      aria-expanded="false"
      aria-controls={`${title} accordion menu content`}
    >
      {time}    
      <svg
      class="accordion__chevron h-7 w-7 shrink-0 transition-transform none"
      aria-hidden="true"
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      ></svg
    >{title}
  
      <!-- use this is not using astro-icon (or another SVG you like) -->

    </button>
  
    <div
      id={`${title} accordion menu content`}
      aria-labelledby={`${title} accordion menu button`}
      class="accordion__content hidden max-h-0 overflow-hidden px-3 transition-all duration-300 ease-in-out sm:px-4"
    >
      <p class="prose mb-4 mt-1 max-w-full transition-[height]">
        {details}
      </p>
    </div>
  </div>

  <script>
    function accordionSetup() {
      const accordionMenus = document.querySelectorAll(
        ".accordion",
      ) as NodeListOf<HTMLElement>;
      accordionMenus.forEach((accordionMenu) => {
        const accordionButton = accordionMenu.querySelector(
          ".accordion__button",
        ) as HTMLElement;
        const accordionChevron = accordionMenu.querySelector(
          ".accordion__chevron",
        ) as HTMLElement;
        const accordionContent = accordionMenu.querySelector(
          ".accordion__content",
        ) as HTMLElement;
  
        if (accordionButton && accordionContent && accordionChevron) {
          accordionButton.addEventListener("click", (event) => {
            if (!accordionMenu.classList.contains("active")) {
              // if accordion is currently closed, so open it
              accordionMenu.classList.add("active");
              accordionButton.setAttribute("aria-expanded", "true");
  
              // set max-height to the height of the accordion content
              // this makes it animate properly
              accordionContent.classList.remove("hidden");
              accordionContent.style.maxHeight =
                accordionContent.scrollHeight + "px";
              accordionChevron.classList.add("rotate-180");
            } else {
              // accordion is currently open, so close it
              accordionMenu.classList.remove("active");
              accordionButton.setAttribute("aria-expanded", "false");
  
              // set max-height to the height of the accordion content
              // this makes it animate properly
              accordionContent.style.maxHeight = "0px";
              accordionChevron.classList.remove("rotate-180");
              // delay to allow close animation
              setTimeout(() => {
                accordionContent.classList.add("hidden");
              }, 300);
            }
            event.preventDefault();
            return false;
          });
        }
      });
    }
  
    // runs on initial page load
    accordionSetup();
  
    // runs on view transitions navigation
    document.addEventListener("astro:after-swap", accordionSetup);
  </script>